本文以在常用的Ubuntu14.04操作系统上，采用Docker容器来快速安装和配置私有节点的比特币测试网络(bitcoin-testnet)作为开发试验环境，结合Node.js为例来说明如何调用比特币钱包节点提供的RPC接口服务来实现一些具体的比特币相关账户和交易操作。

RPC（Remote Procedure Call）即远程过程调用协议，是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。
在Bitcoin的wiki网页上面（ https://en.bitcoin.it/wiki/API_reference_(JSON-RPC) ），可以看到除了Node.js外还有很多种语言都可以调用Bitcoin的RPC，大家可以参考本文内容选择适合自己的语言具体试验。
在上面的网页里，还可以延伸阅读和了解Bitcoin RPC可以调用的命令列表（https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list）。

关于如何安装Ubuntu14.04操作系统和Node.js, 如有需要可以参考上一篇《比特币区块链开发由浅入深指南1》里面的说明进行安装( http://www.8btc.com/blockchain_develope_lesson_1 )。


一、安装Docker运行环境

1.使用apt-get命令安装Docker容器支持软件:

$sudo apt-get install docker.io

2.创建软连接
$sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker

3.查看Docker版本
$docker --version
如看到提示信息类似“Docker version 1.6.2, build 7c8fca2”则说明你已经在Ubuntu14.04上面快速安装Docker成功了。

如需了解更多关于Docker安装和运行的入门说明可以网络搜索更多资料，也可以看看这个网页： “Docker初试”( http://my.oschina.net/lamciuloeng/blog/226107 )


二、安装和运行比特币测试网络(bitcoin-testnet)

1.下载源码自行构建比特币测试网络(bitcoin-testnet)的Docker镜像
$git clone http://www.github.com/freewil/bitcoin-testnet-box

$cd bitcoin-testnet-box

$sudo docker build -t bitcoin-testnet-box .


2.运行Docker镜像
$sudo docker run -t -i -p 19001:19001 -p 19011:19011 bitcoin-testnet-box

注：上述命令中的19001和19011是配置给两个节点提供RPC服务的端口。

3.进入Docker运行环境后，输入下面的命令来启动比特币测试网络：
$ make start
启动成功后，将在本机模拟运行两个比特币测试钱包节点，组成一个私有范围的比特币测试网络。

输入下面的命令可以查看区块信息:
$ bitcoin-cli -datadir=1   getblockchaininfo
显示的提示信息如下，中文为对其中若干关键信息的说明：
{
  "chain": "regtest",
  "blocks": 0,   //已经同步的区块数量，初始启动为0，可以通过进一步的命令来模拟生成区块数据
  "headers": 0,
  "bestblockhash": "0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206",  //最优链的最新区块哈希值
  "difficulty": 4.656542373906925e-10,    //当前挖矿计算难度
  "mediantime": 1296688602,
  "verificationprogress": 1,
  "initialblockdownload": true,
  "chainwork": "0000000000000000000000000000000000000000000000000000000000000002",
  "size_on_disk": 293,
  "pruned": false,
  "softforks": [
    {
      "id": "bip34",
      "version": 2,
      "reject": {
        "status": false
      }
    },
    {
      "id": "bip66",
      "version": 3,
      "reject": {
        "status": false
      }
    },
    {
      "id": "bip65",
      "version": 4,
      "reject": {
        "status": false
      }
    }
  ],
  "bip9_softforks": {
    "csv": {
      "status": "defined",
      "startTime": 0,
      "timeout": 9223372036854775807,
      "since": 0
    },
    "segwit": {
      "status": "active",
      "startTime": -1,
      "timeout": 9223372036854775807,
      "since": 0
    }
  },
  "warnings": ""
}


输入下面的命令可以查看指定网络节点状态信息:
$ bitcoin-cli -datadir=1   getnetworkinfo
显示的提示信息如下，中文为对其中若干关键信息的说明：
{
  "version": 160000,                 //此客户端节点软件版本
  "subversion": "/Satoshi:0.16.0/",  
  "protocolversion": 70015,          //比特币协议版本
  "localservices": "000000000000040d",
  "localrelay": true,
  "timeoffset": 0,                   //时间的时区偏移量
  "networkactive": true,
  "connections": 1,                  //本节点接入的其他对等节点数量
  "networks": [
    {
      "name": "ipv4",
      "limited": false,
      "reachable": true,
      "proxy": "",
      "proxy_randomize_credentials": false
    },
    {
      "name": "ipv6",
      "limited": false,
      "reachable": true,
      "proxy": "",
      "proxy_randomize_credentials": false
    },
    {
      "name": "onion",
      "limited": true,
      "reachable": false,
      "proxy": "",
      "proxy_randomize_credentials": false
    }
  ],
  "relayfee": 0.00001000,    //每笔交易支付给矿工的最少的标准手续费
  "incrementalfee": 0.00001000,
  "localaddresses": [
  ],
  "warnings": ""
}


输入下面的命令可以查看指定第一个钱包节点的钱包信息:
$ bitcoin-cli -datadir=1   getwalletinfo
显示的提示信息如下，中文为对其中若干关键信息的说明：
{
  "walletname": "wallet.dat",    //钱包文件名称
  "walletversion": 159900,       //钱包数据格式版本
  "balance": 0.00000000,         //指定钱包节点的账户余额，初始为0
  "unconfirmed_balance": 0.00000000,  //尚未确认的交易余额，初始为0
  "immature_balance": 0.00000000,     //挖矿得到尚未生效的奖励余额，初始为0
  "txcount": 0,                       //关联的交易数量
  "keypoololdest": 1526042010,        //预生成的公匙和私匙的起始时间
  "keypoolsize": 1000,                //预生成的公匙和私匙池的包含记录数量，用于生成钱包地址和找零地址，这样钱包备份可以对已有的交易以及未来多笔交易有效
  "keypoolsize_hd_internal": 1000,
  "paytxfee": 0.00000000,      //每次发送比特币的时候选择支付的一个可选的额外的、每KB字节的交易手续费。包含额外手续费的交易会更快的被包含在新生成的区块中，因此会更快生效
  "hdmasterkeyid": "86c54343ca1b4de6f1c837d736b63e986d679060"
}

输入下面的命令可以查看指定第二个钱包节点的钱包信息，说明同上:
$bitcoin-cli -datadir=2  getwalletinfo   
{
  "walletname": "wallet.dat",
  "walletversion": 159900,
  "balance": 0.00000000,
  "unconfirmed_balance": 0.00000000,
  "immature_balance": 0.00000000,
  "txcount": 0,
  "keypoololdest": 1526042010,
  "keypoolsize": 1000,
  "keypoolsize_hd_internal": 1000,
  "paytxfee": 0.00000000,
  "hdmasterkeyid": "ff94f9e16cfd6d15a54f4c82e3fc418c5f7a5882"
}



4.初始化和测试区块链数据
在Docker运行窗口里依次输入下面的命令来初始化创建基本的区块链数据，供进一步的程序示例来使用。
注意：在正式的比特币网络环境下，平均是10分钟左右才能产生一个新的区块。但在这里的测试网络(testnet)特殊设定的环境下，区块是通过简单的命令控制就可以即时和批量产生的，方便程序开发测试。

make generate
//说明：模拟新产生1个区块记录

make generate BLOCKS=200
//说明：模拟新产生200个区块记录

bitcoin-cli -datadir=1   getwalletinfo
//说明：查看最新的钱包状态包括余额信息，这时可以留意看到第一个钱包节点的账户余额变为了 5050.00000000 BTC，即通过模拟区块挖矿产生的测试比特币。

make sendfrom1 ADDRESS=mkiytxYA6kxUC8iTnzLPgMfCphnz91zRfZ AMOUNT=10
//说明：给指定测试钱包地址转账10个BTC。注意命令中的测试转账地址“mkiytxYA6kxUC8iTnzLPgMfCphnz91zRfZ”对应后续测试程序示例所需要使用的测试钱包地址。

make generate BLOCKS=10
//说明：模拟新产生10个区块记录，让上面的转账交易得到足够有效的确认 

bitcoin-cli -datadir=1   getwalletinfo
//说明：查看最新的钱包状态包括余额信息, 这时可以留意看到第一个钱包节点的账户余额变为了 5539.99996160 BTC ，即已经交易转账支出了10个BTC加上少许的矿工费用。


三、安装Node.js的RPC支持库
常用的Node.js的RPC支持库有多个，我们这里选用开源项目kapitalize。

在Ubuntu桌面新起一个终端命令行界面，输入以下命令进行安装：
$npm install kapitalize

关于kapitalize开源项目的更多说明可以参考: https://github.com/shamoons/Kapitalize


四、运行示例程序

将下述示例代码复制保存到测试环境下(保存文件名为RpcTestnet.js)，在命令行下输入以下命令即可运行并看到运行结果: 
node RpcTestnet.js

注意：每运行一次测试代码后，都需要到Docker运行环境的命令行下输入"make generate BLOCKS=10", 模拟产生新的区块记录，让测试代码产生的交易记录得到有效的确认。 

示例程序RpcTestnet.js源码如下：

/********************* 示例代码起始 **********************/
//************************************************//
//　 Bitcoin-Testnet RPC sample of node.js　　　　//
//　　　　 PPk Public Group © 2016.　　　　　　　 //
//　　　　　 http://ppkpub.org　　　　　　　　　　//
//　　 Released under the MIT License.　　　　　　//
//××××××××××××××××××××××××××××××××××××××××××××××××//
//对应比特币测试网络(Bitcoin testnet)的RPC服务接口访问参数
var RPC_USERNAME='admin1'; 
var RPC_PASSWORD='123';
var RPC_HOST="127.0.0.1";
var RPC_PORT=19001;

//测试使用的钱包地址
TEST_ADDRESS='mkiytxYA6kxUC8iTnzLPgMfCphnz91zRfZ'; //测试用的钱包地址，注意与比特币正式地址的区别
TEST_PRIVATE_KEY='cTAUfueRoL1HUXasWdnETANA7uRq33BUp3Sw88vKZpo9Hs8xWP82'; //测试用的钱包私钥
TEST_WALLET_NAME='TestWallet1';　//测试的钱包名称 

MIN_DUST_AMOUNT=10000;　//最小有效交易金额,单位satoshi，即0.00000001 BTC
MIN_TRANSACTION_FEE=10000; //矿工费用的最小金额，单位satoshi

console.log('Hello, Bitcoin-Testnet RPC sample.');
console.log('　　 PPk Public Group © 2016　　　');

//初始化访问RPC服务接口的对象
var client = require('kapitalize')()

client
　　.auth(RPC_USERNAME, RPC_PASSWORD)
　　.set('host', RPC_HOST)
　　.set({
　　　　port:RPC_PORT
　　});

//显示当前连接的比特币测试网络信息
client.getInfo(function(err, info) {
　if (err) return console.log(err);
　console.log('Info:', info);
});

//查看当前钱包下属地址账户余额变动情况
client.listaccounts(function(err, account_list) {
　if (err) return console.log(err);
　console.log("Accounts list:\n", account_list);
});

//检查测试帐号是否已存在于测试节点
client.getaccount(TEST_ADDRESS,function(err, result) {
　if (err || result!=TEST_WALLET_NAME ) { //如不存在，则新导入测试帐号私钥
　　　console.log('Import the test account[',TEST_WALLET_NAME,']:',TEST_ADDRESS);
　　　client.importprivkey(TEST_PRIVATE_KEY,TEST_WALLET_NAME,function(err, imported_result) {
　　　　　if (err) return console.log(err);
　　　　　console.log('Imported OK:', imported_result);
　　　　　
　　　　　doSample();
　　　});
　}else{ //如已存在，则直接执行示例
　　　console.log('The test account[',TEST_WALLET_NAME,'] existed. Address:',TEST_ADDRESS);
　　　
　　　doSample();
　}
 
});

// 示例实现功能
function doSample(){
　　//获取未使用的交易(UTXO)用于构建新交易的输入数据块
　　client.listunspent(6,9999999,[TEST_ADDRESS],function(err, array_unspent) {
　　　if (err) return console.log('ERROR[listunspent]:',err);
　　　console.log('Unspent:', array_unspent);

　　　var array_transaction_in=[];
　　　
　　　var sum_amount=0;
　　　for(var uu=0;uu<array_unspent.length;uu++){
　　　　　var unspent_record=array_unspent[uu];
　　　　　if(unspent_record.amount>0){
　　　　　　　sum_amount+=unspent_record.amount*100000000; //注意:因为JS语言缺省不支持64位整数，此处示例程序简单采用32位整数，只能处理交易涉及金额数值不大于0xFFFFFFF即4294967295 satoshi = 42.94967295 BTC。 实际应用程序需留意完善能处理64位整数
　　　　　　　array_transaction_in[array_transaction_in.length]={"txid":unspent_record.txid,"vout":unspent_record.vout};
　　　　　　　
　　　　　　　if( sum_amount > (MIN_DUST_AMOUNT+MIN_TRANSACTION_FEE) )
　　　　　　　　break;
　　　　　}
　　　}
　　　
　　　//确保新交易的输入金额满足最小交易条件
　　　if (sum_amount<MIN_DUST_AMOUNT+MIN_TRANSACTION_FEE) return console.log('Invalid unspent amount');

　　　console.log('Transaction_in:', array_transaction_in);

　　　//生成测试新交易的输出数据块，此处示例是给指定目标测试钱包地址转账一小笔测试比特币
　　　//注意：输入总金额与给目标转账加找零金额间的差额即MIN_TRANSACTION_FEE，就是支付给比特币矿工的交易成本费用
　　　var obj_transaction_out={
　　　　　"mieC38pnPwMqbMAN6sGWwHRQ3msp7nRnNz":MIN_DUST_AMOUNT/100000000,　 //目标转账地址和金额
　　　　　"mkiytxYA6kxUC8iTnzLPgMfCphnz91zRfZ":(sum_amount-MIN_DUST_AMOUNT-MIN_TRANSACTION_FEE)/100000000　//找零地址和金额，默认用发送者地址
　　　　};
　　　
　　　console.log('Transaction_out:', obj_transaction_out);
　　　
　　　//生成交易原始数据包
　　　client.createrawtransaction(array_transaction_in,obj_transaction_out,function(err2, rawtransaction) {
　　　　　if (err2) return console.log('ERROR[createrawtransaction]:',err2);
　　　　　console.log('Rawtransaction:', rawtransaction);
　　　　　
　　　　　//签名交易原始数据包
　　　　　client.signrawtransaction(rawtransaction,function(err3, signedtransaction) {
　　　　　　　if (err3) return console.log('ERROR[signrawtransaction]:',err3);
　　　　　　　console.log('Signedtransaction:', signedtransaction);
　　　　　　　
　　　　　　　var signedtransaction_hex_str=signedtransaction.hex;
　　　　　　　console.log('signedtransaction_hex_str:', signedtransaction_hex_str);
　　　　　　　
　　　　　　　//广播已签名的交易数据包
　　　　　　　client.sendrawtransaction(signedtransaction_hex_str,false,function(err4, sended) { //注意第二个参数缺省为false,如果设为true则指Allow high fees to force it to spend，会强制将in与out金额差额部分作为矿工费用(谨慎!)
　　　　　　　　　if (err4) return console.log('ERROR[sendrawtransaction]:',err4);
　　　　　　　　　console.log('Sended TX:', sended);
　　　　　　　　　
　　　　　　　　　client.listaccounts(function(err, account_list) {
　　　　　　　　　　　if (err) return console.log(err);
　　　　　　　　　　　console.log("Accounts list:\n", account_list); //发送新交易成功后，可以核对下账户余额变动情况
　　　　　　　　　　});
　　　　　　　});
　　　　　});
　　　});
　　});
}

/********************* 示例代码结束 **********************/


在此程序的基础上，经过对Bitcoin协议的进一步了解，我们可以调用RPC接口进一步开发出更复杂功能，如自行构建特定交易数据包（比如多重签名数据）来满足特定业务需求，后续我们PPkPub将深入介绍。

